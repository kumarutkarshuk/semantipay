html,
body {
  margin: 0;
  box-sizing: border-box;
}

#app {
  width: 100vw;
  height: 100vh;
}

.react-flow {
  /* use project's design tokens from app/globals.css */
  --bg-color: hsl(var(--background));
  --text-color: hsl(var(--foreground));
  --node-border-radius: var(--radius);

  /* keep the base HSL triples so we can apply alpha with hsl(... / alpha) */
  --node-color-a: var(--primary);   /* primary H S L triple */
  --node-color-b: var(--accent);    /* accent H S L triple */
  --node-color-c: var(--secondary); /* secondary H S L triple */

  --node-box-shadow: 10px 0 15px hsl(var(--node-color-a) / 0.28),
    -10px 0 15px hsl(var(--node-color-b) / 0.28);

  background-color: var(--bg-color);
  color: var(--text-color);
}

.react-flow__node-turbo {
  border-radius: var(--node-border-radius);
  display: flex;
  height: 70px;
  min-width: 150px;
  font-weight: 500;
  letter-spacing: -0.2px;
  box-shadow: var(--node-box-shadow);
}

.react-flow__node-turbo .wrapper {
  overflow: hidden;
  display: flex;
  padding: 2px;
  position: relative;
  border-radius: var(--node-border-radius);
  flex-grow: 1;
}

.gradient:before {
  content: '';
  position: absolute;
  padding-bottom: calc(100% * 1.41421356237);
  width: calc(100% * 1.41421356237);
  background: conic-gradient(
    from -160deg at 50% 50%,
    hsl(var(--node-color-a)) 0deg,
    hsl(var(--node-color-b)) 120deg,
    hsl(var(--node-color-c)) 240deg,
    hsl(var(--node-color-a)) 360deg
  );
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  border-radius: 100%;
}

.react-flow__node-turbo.selected .wrapper.gradient:before {
  content: '';
  background: conic-gradient(
    from -160deg at 50% 50%,
    hsl(var(--node-color-a)) 0deg,
    hsl(var(--node-color-b)) 120deg,
    hsl(var(--node-color-c)) 240deg,
    hsl(var(--node-color-b) / 0) 360deg
  );
  animation: spinner 4s linear infinite;
  transform: translate(-50%, -50%) rotate(0deg);
  z-index: -1;
}

@keyframes spinner {
  100% {
    transform: translate(-50%, -50%) rotate(-360deg);
  }
}

.react-flow__node-turbo .inner {
  background: hsl(var(--card));
  padding: 16px 20px;
  border-radius: var(--node-border-radius);
  display: flex;
  flex-direction: column;
  justify-content: center;
  flex-grow: 1;
  position: relative;
  color: hsl(var(--card-foreground));
}

.react-flow__node-turbo .icon {
  margin-right: 8px;
}

.react-flow__node-turbo .body {
  display: flex;
}

.react-flow__node-turbo .title {
  font-size: 16px;
  margin-bottom: 2px;
  line-height: 1;
}

.react-flow__node-turbo .subtitle {
  font-size: 12px;
  color: hsl(var(--muted-foreground));
}

.react-flow__node-turbo .cloud {
  border-radius: 100%;
  width: 30px;
  height: 30px;
  right: 0;
  position: absolute;
  top: 0;
  transform: translate(50%, -50%);
  display: flex;
  transform-origin: center center;
  padding: 2px;
  overflow: hidden;
  box-shadow: var(--node-box-shadow);
  z-index: 1;
}

.react-flow__node-turbo .cloud div {
  background-color: var(--bg-color);
  flex-grow: 1;
  border-radius: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}

.react-flow__handle {
  opacity: 0;
}

.react-flow__handle.source {
  right: -10px;
}

.react-flow__handle.target {
  left: -10px;
}

.react-flow__node:focus {
  outline: none;
}

.react-flow__edge .react-flow__edge-path {
  stroke: url(#edge-gradient);
  stroke-width: 2;
  stroke-opacity: 0.75;
}

.react-flow__controls button {
  background-color: var(--bg-color);
  color: var(--text-color);
  border: 1px solid hsl(var(--accent) / 0.5);
  border-bottom: none;
}

.react-flow__controls button:hover {
  background-color: color-mix(in srgb, var(--bg-color) 88%, hsl(var(--primary)) 12%);
}

.react-flow__controls button:first-child {
  border-radius: 5px 5px 0 0;
}

.react-flow__controls button:last-child {
  border-bottom: 1px solid hsl(var(--accent) / 0.5);
  border-radius: 0 0 5px 5px;
}

.react-flow__controls button path {
  fill: var(--text-color);
}

.react-flow__attribution {
  background: rgba(200, 200, 200, 0.08);
}

.react-flow__attribution a {
  color: hsl(var(--accent));
}